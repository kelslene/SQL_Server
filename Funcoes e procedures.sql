-- FUNÇÕES E PROCEDURES
-- funções é o conjunto de declarações em t-sql

-- função UDF é criada pelo usuario
-- delimitador por BEGIN e END
-- necessario definir os parametros de entrada da função ()
-- retorno da variavel pelo RETURN
SELECT SUM(QUANTIDADE)*SUM([PREÇO]) FROM [ITENS NOTAS FISCAIS];
SELECT SUM(QUANTIDADE*[PREÇO]) FROM [ITENS NOTAS FISCAIS]; -- CORRETO
SELECT SUM(QUANTIDADE*[PREÇO]) FROM [ITENS NOTAS FISCAIS] WHERE NUMERO=100;

CREATE FUNCTION FaturamentoNota (@NUMERO AS INT)
RETURNS FLOAT
AS
BEGIN
	DECLARE @FATURAMENTO FLOAT
	SELECT @FATURAMENTO=SUM(QUANTIDADE*[PREÇO]) 
	FROM [ITENS NOTAS FISCAIS] 
	WHERE NUMERO=@NUMERO
	RETURN @FATURAMENTO
END;
-- VERIFICAR EM PROGRAMAÇÃO>FUNÇÕES>FUNÇÕES COM VALOR ESCALAR

SELECT NUMERO, dbo.FaturamentoNota(NUMERO) AS FATURAMENTO 
FROM [ITENS NOTAS FISCAIS];

-- CRIAR DE FORMA ALEATORIA UMA NOTA FISCAL
-- NUMEROS ALEATORIOS
SELECT RAND();
-- VALOR MINIMO 100 E MAXIMO 500
SELECT ROUND(((500-100-1) * RAND() + 100),0)
-- VALOR MINIMO 1 E MAXIMO 100
SELECT ROUND(((100-1-1) * RAND() + 1),0)

CREATE VIEW VW_ALEATORIO AS SELECT RAND() AS VALOR_ALEATORIO
SELECT * FROM VW_ALEATORIO

CREATE FUNCTION NumeroAleatorio (@VALOR_MIN INT, @VALOR_MAX INT)
RETURNS INT
AS
BEGIN
	DECLARE @ALEATORIO INT
	DECLARE @VALOR_ALEATORIO FLOAT
	SELECT @VALOR_ALEATORIO=VALOR_ALEATORIO FROM VW_ALEATORIO
	SET @ALEATORIO = ROUND(((@VALOR_MAX-@VALOR_MIN-1) * @VALOR_ALEATORIO + @VALOR_MIN),0)
	RETURN @ALEATORIO
END

SELECT dbo.[NumeroAleatorio](1,3)
----

SELECT ROUND(SUM(INF.QUANTIDADE * INF.[PREÇO]),2) AS FATURAMENTO
FROM [ITENS NOTAS FISCAIS] INF
INNER JOIN [NOTAS FISCAIS] NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE CLIENTES] CL
ON NF.CPF=CL.CPF
WHERE CL.BAIRRO='Jardins';

-- CRIANDO FUNÇÃO UDF
CREATE FUNCTION FaturamentoBairro (@BAIRRO varchar(50))
RETURNS FLOAT
AS
BEGIN
	DECLARE @FATURAMENTO FLOAT
	SELECT @FATURAMENTO= ROUND(SUM(INF.QUANTIDADE * INF.[PREÇO]),2)
							FROM [ITENS NOTAS FISCAIS] INF
							INNER JOIN [NOTAS FISCAIS] NF
							ON INF.NUMERO = NF.NUMERO
							INNER JOIN [TABELA DE CLIENTES] CL
							ON NF.CPF=CL.CPF
							WHERE CL.BAIRRO=@BAIRRO
	RETURN @FATURAMENTO
END;

SELECT dbo.FaturamentoBairro('Jardins');


-- UDF EM LOOP
DECLARE @LIMITE_MIN INT, @LIMITE_MAX INT
DECLARE @TABELA_NUMEROS TABLE ([NUMERO] INT, [STATUS] VARCHAR(200), [FATURAMENTO] FLOAT)
DECLARE @CONTADOR_NOTAS INT

SET @LIMITE_MIN = 99
SET @LIMITE_MAX = 10000

SET NOCOUNT ON
WHILE
@LIMITE_MIN <= @LIMITE_MAX
BEGIN
	SELECT @CONTADOR_NOTAS = COUNT(*) FROM [NOTAS FISCAIS] WHERE NUMERO=@LIMITE_MIN
	IF @CONTADOR_NOTAS>0
		BEGIN
			INSERT INTO @TABELA_NUMEROS (NUMERO,STATUS, FATURAMENTO) 
			VALUES (@LIMITE_MIN,'É NOTA FISCAL', dbo.FaturamentoNota(@LIMITE_MIN))
		END
	ELSE
		BEGIN
			INSERT INTO @TABELA_NUMEROS (NUMERO,STATUS, FATURAMENTO) 
			VALUES (@LIMITE_MIN,'NÃO É NOTA FISCAL',0)
		END
	SET @LIMITE_MIN=@LIMITE_MIN+1
END
SELECT * FROM @TABELA_NUMEROS ORDER BY NUMERO



-- LOOP2
DECLARE @BAIRRO VARCHAR(50),@CIDADE VARCHAR(50)
DECLARE @LINHAS_BAIRRO INT, @CONTADOR_BAIRROS INT
DECLARE @TABELA_BAIRROS TABLE ([BAIRRO] VARCHAR(50))

SET @CIDADE = 'Rio de Janeiro'
SET @CONTADOR_BAIRROS = 0

SELECT @LINHAS_BAIRRO = COUNT(*) FROM (SELECT DISTINCT BAIRRO FROM [TABELA DE CLIENTES]) CL

WHILE @CONTADOR_BAIRROS < @LINHAS_BAIRRO
BEGIN
	SELECT DISTINCT @BAIRRO = BAIRRO FROM [TABELA DE CLIENTES] 
	WHERE CIDADE = @CIDADE 
	ORDER BY BAIRRO 
	OFFSET @CONTADOR_BAIRROS ROWS 
	FETCH NEXT 1 ROWS ONLY
	INSERT INTO @TABELA_BAIRROS (BAIRRO) VALUES (@BAIRRO)
	SET @CONTADOR_BAIRROS=@CONTADOR_BAIRROS+1
END
SELECT * FROM @TABELA_BAIRROS ORDER BY BAIRRO


-- FUNÇÃO RETORNANDO TABELA
SELECT * FROM [NOTAS FISCAIS] WHERE CPF='7771579779';

CREATE FUNCTION ListaNotasCliente(@CPF AS VARCHAR(11))
RETURNS TABLE
AS 
RETURN SELECT * FROM [NOTAS FISCAIS] WHERE CPF=@CPF

SELECT * FROM dbo.ListaNotasCliente('1471156710')

-- ALTERANDO FUNÇÃO
SELECT TOP 100 * FROM [TABELA DE CLIENTES];

CREATE FUNCTION EnderecoCompleto 
(@ENDERECO VARCHAR(100), @BAIRRO VARCHAR(50), @CIDADE VARCHAR(50), 
@ESTADO VARCHAR(2), @CEP VARCHAR(20))
RETURNS VARCHAR(250)
AS
BEGIN
	DECLARE @ENDERECO_COMPLETO VARCHAR(250)
	SET @ENDERECO_COMPLETO = @ENDERECO+' - '+@BAIRRO+' - '+@CIDADE+' - '+@ESTADO+' - '+@CEP
	RETURN @ENDERECO_COMPLETO
END

SELECT CPF, dbo.EnderecoCompleto ([ENDERECO 1],BAIRRO,CIDADE,ESTADO,CEP) FROM [TABELA DE CLIENTES];
-- ALTER
ALTER FUNCTION EnderecoCompleto 
(@ENDERECO VARCHAR(100), @BAIRRO VARCHAR(50), @CIDADE VARCHAR(50), 
@ESTADO VARCHAR(2), @CEP VARCHAR(20))
RETURNS VARCHAR(250)
AS
BEGIN
	DECLARE @ENDERECO_COMPLETO VARCHAR(250)
	SET @ENDERECO_COMPLETO = @ENDERECO+' , '+@BAIRRO+' , '+@CIDADE+' '+@ESTADO+' , CEP '+@CEP
	RETURN @ENDERECO_COMPLETO
END

-- EXCLUINDO FUNÇÕES
CREATE FUNCTION EnderecoCompleto1 
(@ENDERECO VARCHAR(100), @BAIRRO VARCHAR(50), @CIDADE VARCHAR(50), 
@ESTADO VARCHAR(2), @CEP VARCHAR(20))
RETURNS VARCHAR(250)
AS
BEGIN
	DECLARE @ENDERECO_COMPLETO VARCHAR(250)
	SET @ENDERECO_COMPLETO = @ENDERECO+' - '+@BAIRRO+' - '+@CIDADE+' - '+@ESTADO+' - '+@CEP
	RETURN @ENDERECO_COMPLETO
END

DROP FUNCTION dbo.EnderecoCompleto1

IF OBJECT_ID('EnderecoCompleto1','FN') IS NOT NULL
DROP FUNCTION dbo.EnderecoCompleto1


-- STORED PROCEDURES
-- ROTINAS ARMAZENADAS NO SERVIDOR DO SQL SERVER
-- PODEM SER DEFINIDAS PELO USUARIOS UDF
SELECT CPF,NOME,[DATA DE NASCIMENTO],IDADE FROM [TABELA DE CLIENTES];

SELECT CPF,NOME,[DATA DE NASCIMENTO],IDADE,DATEDIFF(YEAR,[DATA DE NASCIMENTO],GETDATE()) AS IDADE_REAL
FROM [TABELA DE CLIENTES];

-- UPDATE [TABELA DE CLIENTES] SET IDADE = DATEDIFF(YEAR,[DATA DE NASCIMENTO],GETDATE())

CREATE PROCEDURE CalculaIdade
AS
BEGIN
	UPDATE [TABELA DE CLIENTES] SET IDADE = DATEDIFF(YEAR,[DATA DE NASCIMENTO],GETDATE())
END

INSERT INTO [TABELA DE CLIENTES]
(CPF,NOME,[ENDERECO 1],BAIRRO,CIDADE,ESTADO,CEP,[DATA DE NASCIMENTO],IDADE,SEXO,[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA])
VALUES
('123123123','KEL','RUA PADRE MARCAL RIBEIRO','CENTRO','ITAJUBA','MG','37400','1995-04-03',10,'F',12000,12000,1);


--- BUSCAR NOTA CLIENTE
CREATE PROCEDURE BuscarNotaCliente
@CPF AS VARCHAR(12)='19290992743',
@DATA_FINAL AS DATETIME = '20160101',
@DATA_INICIAL AS DATETIME = '20161231'
AS
BEGIN
	SELECT * FROM [NOTAS FISCAIS] WHERE CPF=@CPF AND DATA >= @DATA_INICIAL AND DATA <= @DATA_FINAL;
END;

EXEC BuscarNotaCliente;
EXEC BuscarNotaCliente '19290992743','20160501'

--- EXCLUIR PROCEDURE
DROP PROCEDURE BuscarNotaCliente;


--- ATIVIDADE
select top 100 * from [TABELA DE PRODUTOS];
select top 100 * from [NOTAS FISCAIS];
select top 100 * from [ITENS NOTAS FISCAIS];

ALTER PROCEDURE FaturamentoDepartamento
@DATA_I AS VARCHAR(12),
@DATA_F AS VARCHAR(12)
AS
BEGIN
DECLARE @DEPARTAMENTO TABLE (SABOR VARCHAR(20), DEPARTAMENTO VARCHAR(20))
INSERT INTO @DEPARTAMENTO 
SELECT DISTINCT SABOR, 'FRUTAS NÃO CÍTRICAS' as DEPARTAMENTO 
FROM [TABELA DE PRODUTOS] WHERE 
SABOR IN ('Açai','Cereja','Cereja/Maça','Maça','Manga','Maracujá','Melância')
UNION
SELECT DISTINCT SABOR, 'FRUTAS CÍTRICAS' as DEPARTAMENTO 
FROM [TABELA DE PRODUTOS] WHERE 
SABOR IN ('Laranja','Uva','Limão','Morango','Morango/Limão','Lima/Limão')

SELECT DP.DEPARTAMENTO,SUM(INF.QUANTIDADE*INF.PREÇO) AS VALOR
FROM [TABELA DE PRODUTOS] PR
INNER JOIN [ITENS NOTAS FISCAIS] INF
ON PR.[CODIGO DO PRODUTO]=INF.[CODIGO DO PRODUTO]
INNER JOIN [NOTAS FISCAIS] NF
ON INF.NUMERO=NF.NUMERO
INNER JOIN @DEPARTAMENTO DP
ON PR.SABOR = DP.SABOR
WHERE NF.DATA >= @DATA_I AND DATA <= @DATA_F
GROUP BY DP.DEPARTAMENTO;
END;

EXEC FaturamentoDepartamento '2016-01-01','2016-12-30';
