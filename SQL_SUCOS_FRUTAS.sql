
select count(*) from TABELA_DE_CLIENTES;
select count(*) from TABELA_DE_PRODUTOS;
select count(*) from TABELA_DE_VENDEDORES;
select count(*) from ITENS_NOTAS_FISCAIS;
select count(*) from NOTAS_FISCAIS;

SELECT CPF, NOME, BAIRRO, CIDADE FROM TABELA_DE_CLIENTES;

-- ALIAS PARA COLUNAS
SELECT CPF AS ID_CLIENTE, NOME AS [NOME DE CLIENTE] FROM TABELA_DE_CLIENTES;
-- ALIAS PARA TABELAS
SELECT TDC.CPF, TDC.NOME, TDC.BAIRRO, TDC.CIDADE FROM TABELA_DE_CLIENTES TDC;

-- EXPRESSÃO LÓGICA
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR='LARANJA';
SELECT * FROM TABELA_DE_CLIENTES WHERE IDADE BETWEEN 18 AND 25;
SELECT * FROM TABELA_DE_CLIENTES WHERE IDADE <> 18;
SELECT * FROM TABELA_DE_CLIENTES WHERE YEAR(DATA_DE_NASCIMENTO) = '1995';
SELECT * FROM TABELA_DE_CLIENTES WHERE NOT(YEAR(DATA_DE_NASCIMENTO) = 1995 AND MONTH(DATA_DE_NASCIMENTO) = 10);
SELECT * FROM TABELA_DE_CLIENTES WHERE NOT(YEAR(DATA_DE_NASCIMENTO) = 2000);
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR='MANGA' AND TAMANHO='1 LITRO';
SELECT * FROM TABELA_DE_PRODUTOS WHERE NOT EMBALAGEM='PET';
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR IN('MANGA', 'LARANJA'); -- SUBSTITUI VARIOS OR
SELECT * FROM TABELA_DE_PRODUTOS WHERE PRECO_DE_LISTA BETWEEN 1 AND 5;

-- CONJUNTO DE PALAVRAS
SELECT SABOR FROM TABELA_DE_PRODUTOS WHERE TAMANHO LIKE '%ML';
SELECT * FROM TABELA_DE_PRODUTOS WHERE TAMANHO LIKE '%LITRO';
SELECT * FROM TABELA_DE_CLIENTES WHERE NOME LIKE '%SILVA';

-- DISTINTOS
SELECT DISTINCT CIDADE, ESTADO FROM TABELA_DE_CLIENTES;
SELECT DISTINCT EMBALAGEM, TAMANHO FROM TABELA_DE_PRODUTOS;
SELECT DISTINCT SABOR, TAMANHO FROM TABELA_DE_PRODUTOS WHERE TAMANHO LIKE '%LITRO%';
SELECT DISTINCT SABOR FROM TABELA_DE_PRODUTOS;

-- TOP
SELECT TOP 10 * FROM TABELA_DE_CLIENTES;
SELECT DISTINCT TOP 10 * FROM NOTAS_FISCAIS WHERE DATA_VENDA = '2017-10-01' ORDER BY NUMERO;
SELECT TOP 5 * FROM TABELA_DE_PRODUTOS  ORDER BY PRECO_DE_LISTA DESC;
SELECT TOP 1 * FROM TABELA_DE_PRODUTOS  WHERE NOME_DO_PRODUTO= 'Linha Refrescante - 1 Litro - Morango/Limao' ORDER BY PRECO_DE_LISTA DESC;

-- AGRUPANDO
-- FUNÇÃO DE AGREGAÇÃO
-- SIM, AVG, MAX, MIN
SELECT CIDADE, AVG(IDADE) AS IDADE FROM TABELA_DE_CLIENTES GROUP BY CIDADE;
SELECT CIDADE, COUNT(*) AS QTD_CLIENTES FROM TABELA_DE_CLIENTES GROUP BY CIDADE;
SELECT EMBALAGEM, SABOR, SUM(PRECO_DE_LISTA) AS TOTAL_PREÇO FROM TABELA_DE_PRODUTOS WHERE EMBALAGEM='PET' GROUP BY EMBALAGEM, SABOR;
SELECT CODIGO_DO_PRODUTO, COUNT(*) AS QTD_VENDAS FROM ITENS_NOTAS_FISCAIS WHERE CODIGO_DO_PRODUTO='1101035' AND QUANTIDADE=99 GROUP BY CODIGO_DO_PRODUTO;

-- FILTRO ENVOLVENDO AGREGAÇÃO
SELECT ESTADO, SUM(LIMITE_DE_CREDITO) 
FROM TABELA_DE_CLIENTES GROUP BY ESTADO;

SELECT ESTADO, SUM(LIMITE_DE_CREDITO) 
FROM TABELA_DE_CLIENTES GROUP BY ESTADO HAVING SUM(LIMITE_DE_CREDITO)>900000;

SELECT EMBALAGEM, MAX(PRECO_DE_LISTA) AS MAX_PRECO, MIN(PRECO_DE_LISTA) AS MIN_PRECO FROM TABELA_DE_PRODUTOS 
WHERE PRECO_DE_LISTA>=10 
GROUP BY EMBALAGEM
HAVING MAX(PRECO_DE_LISTA)>15;

SELECT CODIGO_DO_PRODUTO, SUM(QUANTIDADE) AS TOTAL_VENDAS FROM ITENS_NOTAS_FISCAIS 
GROUP BY CODIGO_DO_PRODUTO 
HAVING SUM(QUANTIDADE) > 394000
ORDER BY TOTAL_VENDAS DESC;

SELECT * FROM TABELA_DE_PRODUTOS;

SELECT 
(CASE WHEN PRECO_DE_LISTA >=7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
	 WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
	 ELSE 'PRODUTO BARATO'
END) AS CLASSIFICACAO, COUNT(*) AS QUANTIDADE
FROM TABELA_DE_PRODUTOS
GROUP BY (CASE WHEN PRECO_DE_LISTA >=7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
			   WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
		  ELSE 'PRODUTO BARATO'
END);

SELECT NOME, LIMITE_DE_CREDITO,
(CASE
WHEN LIMITE_DE_CREDITO >=150000 THEN 'CLIENTES GRANDES'
WHEN LIMITE_DE_CREDITO  > 150000 AND LIMITE_DE_CREDITO <=110000 THEN 'CLIENTES MÉDIOS'
ELSE 'CLIENTES PEQUENOS'
END) AS CLASSIFICACAO_CLIENTES
FROM TABELA_DE_CLIENTES
ORDER BY CLASSIFICACAO_CLIENTES;

-- RELACIONAMENTOS
SELECT V.MATRICULA, V.NOME, NF.NUMERO, NF.DATA_VENDA, NF.IMPOSTO
FROM TABELA_DE_VENDEDORES V
INNER JOIN NOTAS_FISCAIS NF 
ON V.MATRICULA = NF.NUMERO;

SELECT MATRICULA, COUNT(*) AS NUMERO_NOTAS FROM NOTAS_FISCAIS GROUP BY MATRICULA;

SELECT NF.MATRICULA, V.NOME, COUNT(*) AS QUANTIDADE
FROM TABELA_DE_VENDEDORES V
INNER JOIN NOTAS_FISCAIS NF 
ON V.MATRICULA = NF.MATRICULA
GROUP BY  NF.MATRICULA, V.NOME;

SELECT PR.CODIGO_DO_PRODUTO, PR.NOME_DO_PRODUTO, SUM(QUANTIDADE) AS QUANTIDADE 
FROM TABELA_DE_PRODUTOS PR
INNER JOIN ITENS_NOTAS_FISCAIS NF
ON PR.CODIGO_DO_PRODUTO = NF.CODIGO_DO_PRODUTO
GROUP BY PR.CODIGO_DO_PRODUTO, PR.NOME_DO_PRODUTO
HAVING SUM(QUANTIDADE) > 394000 
ORDER BY SUM(QUANTIDADE) DESC;

SELECT DISTINCT TC.CPF AS CPF_CLIENTE,NF.CPF AS CPF_NOTA, TC.NOME
FROM TABELA_DE_CLIENTES TC
LEFT JOIN NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF;

SELECT COUNT (*) FROM TABELA_DE_CLIENTES;

INSERT INTO TABELA_DE_CLIENTES
(CPF, NOME, ENDERECO_1, ENDERECO_2,BAIRRO, CIDADE, ESTADO, CEP, DATA_DE_NASCIMENTO, IDADE, GENERO, LIMITE_DE_CREDITO, VOLUME_DE_COMPRA, PRIMEIRA_COMPRA)
VALUES ('15478536525','Kelslene Carvalho Correa', 'Rua A','','Avenida', 'Itajubá','MG','37504040','1995-03-04',28,'F',250000,'45622',0)

SELECT TOP 100 * FROM TABELA_DE_CLIENTES;

SELECT DISTINCT TC.CPF AS CPF_CLIENTE, TC.NOME
FROM TABELA_DE_CLIENTES TC
LEFT JOIN NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF
WHERE NF.CPF IS NULL;


SELECT COUNT(*) FROM TABELA_DE_CLIENTES; -- 16
SELECT COUNT(*) FROM TABELA_DE_VENDEDORES; -- 4

SELECT TC.BAIRRO, TC.NOME AS NOME_CLIENTE, TV.NOME AS NOME_VENDEDOR
FROM TABELA_DE_CLIENTES TC
INNER JOIN TABELA_DE_VENDEDORES TV
ON TC.BAIRRO = TV.BAIRRO;

-- VENDENDOR SEM CLIENTE NO SEU BAIRRO: ROBERTA MARTINS EM COPACABANA
SELECT TC.BAIRRO, TC.NOME AS NOME_CLIENTE, TV.NOME AS NOME_VENDEDOR
FROM TABELA_DE_CLIENTES TC
RIGHT JOIN TABELA_DE_VENDEDORES TV
ON TC.BAIRRO = TV.BAIRRO
WHERE TC.NOME IS NULL;

-- CLIENTE SEM VENDEDOR NO SEU BAIRRO: 9 CLIENTES
SELECT TC.BAIRRO, TC.NOME AS NOME_CLIENTE, TV.NOME AS NOME_VENDEDOR
FROM TABELA_DE_CLIENTES TC
LEFT JOIN TABELA_DE_VENDEDORES TV
ON TC.BAIRRO = TV.BAIRRO
WHERE TV.NOME IS NULL;

-- CLIENTE SEM VENDEDOR NO SEU BAIRRO: 9 CLIENTES
SELECT TC.BAIRRO AS BAIRRO_CLIENTE, TC.NOME AS NOME_CLIENTE, TV.NOME AS NOME_VENDEDOR
FROM TABELA_DE_CLIENTES TC
FULL JOIN TABELA_DE_VENDEDORES TV
ON TC.BAIRRO = TV.BAIRRO
WHERE TV.NOME IS NULL OR TC.NOME IS NULL;

-- UNION / UNION ALL (ACRESCENTAR)
-- PRECISA TER MESMA QUANTIDADE DE COLUNAS E MESMO TIPO
SELECT  BAIRRO FROM TABELA_DE_CLIENTES
UNION
SELECT  BAIRRO FROM TABELA_DE_VENDEDORES;

SELECT  BAIRRO, 'CLIENTE' AS ORIGEM FROM TABELA_DE_CLIENTES
UNION ALL
SELECT  BAIRRO, 'VENDEDOR' AS ORIGEM FROM TABELA_DE_VENDEDORES;

-- SUB-QUERY
-- TAMBÉM PODE SER UTILIZADA COMO TABELA
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES;
SELECT NOME, BAIRRO, CIDADE FROM TABELA_DE_CLIENTES WHERE BAIRRO IN (SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES);

SELECT DISTINCT SABOR FROM TABELA_DE_PRODUTOS 
WHERE CODIGO_DO_PRODUTO 
IN (SELECT INF.CODIGO_DO_PRODUTO FROM ITENS_NOTAS_FISCAIS  INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO HAVING SUM(INF.QUANTIDADE) > 394000);

SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS PRECO_MEDIO FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM
HAVING AVG(PRECO_DE_LISTA) <=10;

SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE FROM ITENS_NOTAS_FISCAIS  INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO HAVING SUM(INF.QUANTIDADE) > 394000 
ORDER BY SUM(INF.QUANTIDADE) DESC;

SELECT SUM_QUANTIDADE.CODIGO_DO_PRODUTO, SUM_QUANTIDADE.NOME_DO_PRODUTO, SUM_QUANTIDADE.QUANTIDADE FROM
(SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE FROM ITENS_NOTAS_FISCAIS  INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO) SUM_QUANTIDADE
WHERE QUANTIDADE > 394000;

-- VIEW
-- RELAÇÃO LÓGICA, ATUA EM CIMA DA FÓRMULA (MENOR DESEMPENHO)
--SELECT * FROM MEDIA_EMBALAGENS;
--SELECT NOME_DO_PRODUTO, AVG(QUANTIDADE) AS MEDIA 
--FROM MEDIA_EMBALAGENS GROUP BY NOME_DO_PRODUTO;

SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE FROM ITENS_NOTAS_FISCAIS  INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO HAVING SUM(INF.QUANTIDADE) > 394000 
ORDER BY SUM(INF.QUANTIDADE) DESC;

--SELECT * FROM TOTAL_PRODUTOS WHERE QUANTIDADE>394000 ORDER BY QUANTIDADE DESC;

-- FUNÇÕES
-- VARIA DE ACORDO COM O BANCO DE DADOS (NÃO É PADRONIZADO)

-- FUNÇÕES DE TEXTOS:
-- LOWER, UPPER, CONCAT (OU UTILIZAR +), RIGHT, LEFT, SUBSTRING (POSIÇÃO, E QTD DE CARACTERES), RTRIM/LTRIM/TRIM, REPLACE, LEN
SELECT TOP 100 * FROM TABELA_DE_CLIENTES;
SELECT NOME, UPPER(NOME) AS NOME_UPPER FROM TABELA_DE_CLIENTES;

SELECT CEP, CONCAT(LEFT(CEP,2),'-',SUBSTRING(CEP,3,3),'-',RIGHT(CEP,3)) FROM TABELA_DE_CLIENTES;

SELECT REPLACE(ENDERECO_1,'R.','Rua') FROM TABELA_DE_CLIENTES;

SELECT NOME, CHARINDEX(' ',NOME, 1), LEFT(NOME,CHARINDEX(' ',NOME, 1)-1) AS PRIMEIRO_NOME FROM TABELA_DE_CLIENTES;

-- DATA E HORA
-- DATEADD, DATEDIFF, DATEPART, GETDATE (DATA E HORA DO COMPUTADOR), ISDATE, DATETIMEFROMPARTS
SELECT GETDATE();
SELECT DATEADD(MONTH,1,GETDATE());
SELECT DATEADD(YEAR,-1,GETDATE()) AS PY;

SELECT DATEDIFF(DAY,'2023-01-01',GETDATE()) AS DIAS_CORRIDOS;
SELECT DATEDIFF(DAY,'2023-01-01','2023-12-31') AS DIAS_ANO;

-- FUNÇÕES NUMERICAS
-- ROUND, CEILING (MAIOR INTEIRO), FLOOR (MENOR INTEIRO), POWER (POTENCIA), EXP (EXPONENCIAL), 
-- SQRT (RAIZ QUADRADA), SIGN (SINAL POSITIVO OU NEGATIVO), ABS (VALOR ABSOLUTO), %
SELECT ROUND(45.3323244,2), ROUND(45.3383247,2);


SELECT TOP 5 * FROM NOTAS_FISCAIS;
SELECT TOP 5 * FROM ITENS_NOTAS_FISCAIS;

SELECT YEAR(DATA_VENDA) AS ANO_VENDA, FLOOR(SUM(IMPOSTO*(QUANTIDADE*PRECO))) AS TOTAL_IMPOSTO
FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR(DATA_VENDA) = 2016
GROUP BY YEAR(DATA_VENDA);

-- FUNÇÕES CONVERSÃO
-- CAST (NUMERO P/ NUMERO), CONVERT (DATA P/ TEXTO)
SELECT CONVERT(VARCHAR(25),GETDATE(),121)

SELECT DATA_DE_NASCIMENTO, CONVERT(VARCHAR(25),DATA_DE_NASCIMENTO,106) FROM TABELA_DE_CLIENTES;

SELECT YEAR(DATA_VENDA) AS ANO_VENDA, TC.NOME AS NOME_CLIENTE, ROUND(SUM(INF.QUANTIDADE * INF.PRECO),2) AS TOTAL_VENDIDO
FROM NOTAS_FISCAIS NF
INNER JOIN TABELA_DE_CLIENTES TC
ON NF.CPF = TC.CPF
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON NF.NUMERO = INF.NUMERO
GROUP BY YEAR(DATA_VENDA), TC.NOME;

-- PROBLEMAS
-- SUBQUERY
SELECT SUM(INF.QUANTIDADE) AS VOLUME_COMPRADO, NF.CPF, CONVERT(VARCHAR(7),NF.DATA_VENDA,120) AS MES_ANO
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
GROUP BY NF.CPF, CONVERT(VARCHAR(7),NF.DATA_VENDA,120);

SELECT TC.CPF, TC.NOME, TC.VOLUME_DE_COMPRA, CON1.VOLUME_COMPRADO, CON1.MES_ANO, 
(CASE WHEN TC.VOLUME_DE_COMPRA >= CON1.VOLUME_COMPRADO  THEN 'VERDADEIRO' ELSE 'FALSO' END) AS VENDA_VALIDA
FROM TABELA_DE_CLIENTES TC 
INNER JOIN (SELECT SUM(INF.QUANTIDADE) AS VOLUME_COMPRADO, NF.CPF, CONVERT(VARCHAR(7),NF.DATA_VENDA,120) AS MES_ANO
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
GROUP BY NF.CPF, CONVERT(VARCHAR(7),NF.DATA_VENDA,120)) CON1
ON TC.CPF = CON1.CPF
WHERE CON1.MES_ANO = '2015-01';

SELECT TP.SABOR, SUM(INF.QUANTIDADE) AS QUANTIDADE, YEAR(NF.DATA_VENDA) AS ANO_VENDA
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE YEAR(NF.DATA_VENDA)=2015
GROUP BY TP.SABOR,YEAR(NF.DATA_VENDA)
ORDER BY QUANTIDADE DESC;

SELECT SUM(INF.QUANTIDADE) AS QUANTIDADE_TOTAL_ANO, YEAR(NF.DATA_VENDA) AS ANO_VENDA
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE YEAR(NF.DATA_VENDA)=2015
GROUP BY YEAR(NF.DATA_VENDA);


SELECT QUERY_1.SABOR, QUERY_1.ANO_VENDA, QUERY_1.QUANTIDADE,
ROUND((CONVERT(FLOAT,QUERY_1.QUANTIDADE)/CONVERT(FLOAT,QUERY_2.QUANTIDADE_TOTAL_ANO))*100,2) AS PERCENTUAL_TOTAL
FROM (
SELECT TP.SABOR, SUM(INF.QUANTIDADE) AS QUANTIDADE, YEAR(NF.DATA_VENDA) AS ANO_VENDA
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE YEAR(NF.DATA_VENDA)=2015
GROUP BY TP.SABOR,YEAR(NF.DATA_VENDA)
) QUERY_1
INNER JOIN (
SELECT SUM(INF.QUANTIDADE) AS QUANTIDADE_TOTAL_ANO, YEAR(NF.DATA_VENDA) AS ANO_VENDA
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE YEAR(NF.DATA_VENDA)=2015
GROUP BY YEAR(NF.DATA_VENDA)
) QUERY_2
ON QUERY_1.ANO_VENDA = QUERY_2.ANO_VENDA
ORDER BY QUERY_1.QUANTIDADE DESC;